name: Release new Splittermond version
permissions:
  contents: write
  packages: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (without v prefix)"
        required: true

jobs:
  release-new-version:
    runs-on: ubuntu-latest
    env:
      outputName: splittermond-${{github.event.inputs.version}}
      outputFile: splittermond-${{github.event.inputs.version}}.zip
      prefixedVersion: v${{github.event.inputs.version}}
      branchName: release/v${{github.event.inputs.version}}
    steps:
      - name: check env
        run: |
          echo ${outputName}
          echo ${outputFile}
          echo ${branchName}

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # fetch all history so we actually commit on top of main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ">=24.3.0"

      - name: Create release branch
        run: |
          git checkout -b ${{ env.branchName }}

      - name: Set new version in system.json
        run: node ./.github/scripts/index.cjs
        env:
          fileToUpdate: "./public/system.json"
          version: ${{github.event.inputs.version}}

      - name: Set new version in package.json
        run: node ./.github/scripts/index.cjs
        env:
          fileToUpdate: "./package.json"
          version: ${{github.event.inputs.version}}

      - name: Set new paths in System.json
        run: node ./.github/scripts/replace_links.cjs
        env:
          fileToUpdate: "./public/system.json"
          newManifest: https://github.com/SplittermondFoundry/splittermond/releases/download/${{env.prefixedVersion}}/system.json
          newDownload: https://github.com/SplittermondFoundry/Splittermond/releases/download/${{env.prefixedVersion}}/${{env.outputFile}}

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Commit and push changes to release branch
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@github.com
          git add public/system.json package.json package-lock.json
          git commit -m "Update version to ${{github.event.inputs.version}}"
          git push origin ${{ env.branchName }}

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release version ${{ github.event.inputs.version }}`,
                head: '${{ env.branchName }}',
                base: 'main',
                body: `Automated release for version ${{ github.event.inputs.version }}\n\n- Updated system.json\n- Updated package.json\n- Updated package-lock.json`
            });
            console.log(`Created PR #${pr.number}`);
            return pr.number;

      - name: Merge Pull Request
        id: merge-pr
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.create-pr.outputs.result }};
            const { data: mergeResult } = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                commit_title: `Release version ${{ github.event.inputs.version }}`,
                commit_message: `Merge release branch for version ${{ github.event.inputs.version }}`,
                merge_method: 'merge'
            });
            console.log(`Merged PR #${prNumber}`);
            console.log(`Merge commit SHA: ${mergeResult.sha}`);
            return mergeResult.sha;

      - name: Checkout main and verify commit
        run: |
          git checkout main
          git pull origin main
          EXPECTED_SHA="${{ steps.merge-pr.outputs.result }}"
          CURRENT_SHA=$(git rev-parse HEAD)
          echo "Expected merge commit SHA: $EXPECTED_SHA"
          echo "Current HEAD SHA: $CURRENT_SHA"
          if [ "$EXPECTED_SHA" != "$CURRENT_SHA" ]; then
              echo "ERROR: Commit SHA mismatch! Expected $EXPECTED_SHA but got $CURRENT_SHA"
              exit 1
          fi
          echo "âœ… Commit SHA verified successfully"

      - name: Create and push tag
        run: |
          VERIFIED_SHA=$(git rev-parse HEAD)
          echo "Creating tag ${{env.prefixedVersion}} on commit $VERIFIED_SHA"
            git tag ${{env.prefixedVersion}}
          git push origin --tags

      - name: Create Zip for foundry
        run: |
          sudo apt-get install zip 
          cd dist/ && zip -r ../${{env.outputFile}} ./*; cd -
          zip -r ${{env.outputFile}} README.md FoundryModule1.png screenshots

      - name: Release package to github
        run: |
          npm set "//npm.pkg.github.com/:_authToken=${{secrets.GITHUB_TOKEN}}"
          npm publish
          npm set "//npm.pkg.github.com/:_authToken=garbage"
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Upload release assets
        uses: softprops/action-gh-release@v2.3.3
        with:
          generate_release_notes: true
          draft: false
          tag_name: v${{github.event.inputs.version}}
          files: |
            ${{env.outputFile}}
            dist/system.json

          #- name: Release to Foundry
          #  run: node ./.github/scripts/publish_to_foundry.mjs
          #  env:
          #      AUTH_TOKEN: ${{secrets.FOUNDRY_VTT_PUBLISH_TOKEN}}
          #      SYSTEM_JSON_PATH: "./dist/system.json"
          #      DRY_RUN: "false"

      - name: Cleanup release branch
        run: |
          git push origin --delete ${{ env.branchName }}
        continue-on-error: true
